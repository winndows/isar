#!/usr/bin/make -f

# Debian rules for custom kernel module build
#
# This software is a part of ISAR.
# Copyright (c) Siemens AG, 2018
#
# SPDX-License-Identifier: MIT

export DEB_BUILD_OPTIONS=parallel=$(shell nproc)

export CROSS_COMPILE=$(DEB_HOST_GNU_TYPE)-

ifeq ($(DEB_HOST_GNU_CPU), arm)
export ARCH=arm
endif
ifeq ($(DEB_HOST_GNU_CPU), aarch64)
export ARCH=arm64
endif
ifeq ($(DEB_HOST_GNU_CPU), riscv64)
export ARCH=riscv
endif
ifneq (,$(findstring 86,$(DEB_HOST_GNU_CPU)))
export ARCH=x86
endif

# Custom kernels contain the build folder directly.
KDIR := $(shell dpkg -L linux-headers-${KERNEL_NAME} | grep "/lib/modules/.*/build")
ifeq ($(KDIR),)
# Debian kernels install that folder indirectly via a dependency.
KERNEL_DEP := $(shell dpkg-query -W -f '$${Depends}' linux-headers-${KERNEL_NAME} | sed 's/.*\(linux-headers-[[:graph:]]*\).*/\1/')
KDIR := $(shell dpkg -L $(KERNEL_DEP) | grep "/lib/modules/.*/build")
endif

# With some build systems like sbuild `dh clean` can be called twice:
# first, by build system itself before chroot's apt database updated,
# second, by dpkg-buildpackage during build. So, KDIR may be empty
# in first case (while no dependencies are yet installed), and a broken
# 'make ... clean' command is produced. Just skip override in this case.
ifneq ($(KDIR),)
override_dh_auto_clean:
	$(MAKE) -C $(KDIR) M=$(PWD) clean
endif

override_dh_auto_build:
	$(MAKE) -C $(KDIR) M=$(PWD) modules

override_dh_auto_install:
	$(MAKE) -C $(KDIR) M=$(PWD) INSTALL_MOD_PATH=$(PWD)/debian/${PN} modules_install

%:
	CFLAGS= LDFLAGS= dh $@ --parallel
